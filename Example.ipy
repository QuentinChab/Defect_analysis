# -*- coding: utf-8 -*-
"""
Created on Tue Oct  8 14:42:50 2024

@author: Quentin Chaboche

This function aim to detect the topological defects in an image, their charge
  orientation, as well as their splay-bend anisotropy e=(k1-k3)/(k1+k3).
  Here k1 refers to the splay nematic parameter in nematic liquid crystal 
  theory, and k3 to the bend parameter.
Here, a window will be displayed allowing the user to tune the detection 
  parameters with sliders and update them.

Please be patient with the sliders, computations can take a few seconds
"""

#################################### 
%matplotlib qt
import os
import matplotlib.pyplot as plt

######## FILL THIS SECTION #########
####################################

# Where are you storing the folder?
function_directory = os.getcwd() # current active folder

# path to the image to analyze
path = function_directory+os.sep+'20240215_Actin_Only_8_tif.tif'

# path to save data
savedir = 'Select'#Fill this field with your target location or with 'Select'

# Say wether the image is a stack
stack = False


###################################
###################################



# Initial detection parameters. Their can be modified when function is executed

# The size in pixels of a typical feature of the system. This is used to compute the
#   vector field. It corresponds to the sigma parameter of OrientationJ (divided by 1.5)
#   For cell monolayer, you can take the width 
feature_in = 14

# Radius of detection for anisotropy. Around a +1/2 defect, we take the director 
#   angle as a function of azimuthal angle at a distance Rdet. This is a 
#   signature of splay-bend anisotropy.
Rdet_in = 30
frame = 15

det_param = [feature_in, Rdet_in, 0.5]


######## Import necessary packages ########
import numpy as np
import sys
# sys.path.append(function_directory+os.sep+'Dep)
from DeftPunk import defect_analyzer # import our function




######### Call the function #########
def_tab, det_out, _, buttons = defect_analyzer(path, det_param, stack=stack, frame=frame, savedir=savedir)

# wait for the user to select the correct values 
#(tracks for the moment the inteface window is closed)
figure_ref = plt.gcf() # current figure (interface)
while plt.fignum_exists(figure_ref.number):
     plt.pause(0.1)

# display thise values
f_out, R_out, order_out = det_out

print('You chose a feature size of %.0f px, a threshold for order parameter of %.2f and a detection radius of %.0f px'%(f_out, order_out, R_out))
print('There is a total of %.0f +1/2 defects and %.0f -1/2 defects.'%(np.sum(def_tab['charge']==1/2), np.sum(def_tab['charge']==-1/2)))